import base64
x = ( b'''#This TOol By Red_Virus .©

##############imports
from os import *
from time import *
from base64 import *
import webbrowser
################
system("clear")

load1 = ("     \033[1;31mL  \033[1;32mO  \033[1;33mA  \033[1;34mD  \033[1;36mI  N  \033[1;37mG .. \033[1;33m/ ")
	
load2 = ("     \033[1;32mL  \033[1;31mO  \033[1;34mA  \033[1;37mD  \033[1;33mI  \033[1;36mN  \033[1;35mG ..\033[1;34m- ")
	
load3 = ("     \033[1;37mL  \033[1;36mO  \033[1;34mA  \033[1;33mD  \033[1;32mI  \033[1;35mN  \033[1;31mG ..\033[1;31m\ ")
######restart def
def restart():
	system('clear')
	tool_name()
	loadbar()
	system('clear')
	termux_menu()
	termux_tools()
###################	

#####loading def	
def loading():
	tool_name()
	print('\n\n\n\n\n\n\n')
	print (load1,end= '\r')
	sleep(0.5)
	print (load2,end='\r')
	sleep(0.5)
	print (load3,end='\r')
	sleep(0.5)
	print (load1,end='\r')
	sleep(0.5)
	print (load2,end='\r')
	sleep(0.5)
	print (load3,end='\r')
	sleep(0.5)
	print (load2,end='\r')
####################
#####loading bar	
def loadbar():
	for r in range(0,6):
		r = r*"\033[1;32m▊"
		m = 0
		n = 100
		while m < n:
			m += 10
			print ("ToOl Loading .. |", r,m,'%  ',end='\r')
			sleep(0.1)
#####################

#######tool main banner####	
def banner():
	print(' \033[1;32m')
	print("\n                 ██████████   ")
	print("               ██████████████   ")
	print("                 █        █    ")
	print("           ─────█─▄▀█──█▀▄─█──     ") 
	print("           ────▐▌──────────▐▌──      ")
	print("           ────█▌▀▄──▄▄──▄▀▐█──     ")
	print("           ───▐██──▀▀──▀▀──██▌──      ")
	print("           ──▄████▄──▐▌──▄████▄─      ")
	print("\n\033[1;36m ▁\033[1;37m ▂\033[1;34m ▄\033[1;32m ▅ \033[1;33m▆ \033[1;36m[ \033[1;31m☻ĴǾ₭ẹṜ_₮ǾǾĿ₷ \033[1;33mV1.2 \033[1;36m] \033[1;33m▆\033[1;32m ▅\033[1;31m ▄ \033[1;37m▂ \033[1;34m▁  ")
	print(' ')
##################
def logo():
	print(' \033[1;33m')
	print('        ╭╮╮╱▔▔▔▔╲╭╭╮    ')
	print('        ╰╲╲▏▂╲╱▂▕╱╱╯    ')
	print('        ┈┈╲▏▇▏▕▇▕╱┈┈    ')
	print('        ┈┈╱╲▔▕▍▔╱╲┈┈    ')
	print('        ╭╱╱▕╋╋╋╋▏╲╲╮     ')
	print('        ╰╯╯┈╲▂▂╱┈╰╰╯     ')
	print('     ☻ĴǾ₭ЄR☠ŦØØĿ₷ \033[1;31mV1.2 \033[1;33m  ')
	print(' ')
####$######$$#$$
def tool_name():
	print(' \033[1;32m')
	print('     _       _               _____           _')
	print('    | | ___ | | _____ _ __  |_   _|__   ___ | |___')
	print(" _  | |/ _ \| |/ / _ \ '__|   | |/ _ \ / _ \| / __|")
	print("| |_| | (_) |   <  __/ |      | | (_) | (_) | \__ \ ")
	print(' \___/ \___/|_|\_\___|_|      |_|\___/ \___/|_|___/ \033[1;32m V1.2')
	print(' ')

 #########Linux menu
def jhash():
	print(" \033[1;31m")
	print("     _       _              _   _           _ ")
	print("    | | ___ | | _____ _ __ | | | | __ _ ___| |__ ")
	print(" _  | |/ _ \| |/ / _ \ '__|| |_| |/ _` / __| '_ \ ")
	print("| |_| | (_) |   <  __/ |   |  _  | (_| \__ \ | | | ")
	print(" \___/ \___/|_|\_\___|_|___|_| |_|\__,_|___/_| |_| \033[1;32m V1.2")
	print("                      |_____|            ")
	print(" ")
###############
def con_termux():
	print(' ')
	con =int(input('''\033[1;33m
╔════════════════╗
╠[\033[1;32m88\033[1;33m] \033[1;37mMain Menu \033[1;33m ║
╠═[\033[1;32m99\033[1;33m] \033[1;31mExit      \033[1;33m║
╠════════════════╝
╚══>$\ \033[1;32m'''))
	if con ==88:
		system('clear')
		termux_menu()
		termux_tools()
	
	elif con ==99:
		system('reset')
		exit()
	
	else:
		print('\033[1;31mOops .. Error!')
		sleep(1)
		print('\n\033[1;32mExiting...')
		sleep(2)
		system('reset')
		exit()	
###########termux menu
def termux_menu():
	banner()
	print(
"""\033[1;36m╔════════════════════════════════════════╗
╠[\033[1;31m1\033[1;36m] \033[1;32mUpdate && Upgrade Termux ツ\033[1;36m         ║
╠\033[1;34m════════════════════════════════════════\033[1;36m╣
╠[\033[1;31m2\033[1;36m] \033[1;32mTermux Tools >_\033[1;36m                     ║
╠\033[1;34m════════════════════════════════════════\033[1;36m╣
╠[\033[1;31m3\033[1;36m] \033[1;32mMetasploit (M.S.F.W)\033[1;36m                ║
╠\033[1;34m════════════════════════════════════════\033[1;36m╣
╠[\033[1;31m4\033[1;36m] \033[1;32mLinux In Termux \033[1;36m                    ║
╠\033[1;34m════════════════════════════════════════\033[1;36m╣
╠[\033[1;31m5\033[1;36m] \033[1;32mEncode & Decode Text\033[1;36m                ║
╠\033[1;34m════════════════════════════════════════\033[1;36m╣
╠[\033[1;31m6\033[1;36m] \033[1;32mWebSites For You ^_^\033[1;36m                ║
╠\033[1;34m════════════════════════════════════════\033[1;36m╣
╠[\033[1;31m7\033[1;36m] \033[1;32mArt Your Text ◕‿-\033[1;36m                   ║
╠\033[1;34m════════════════════════════════════════\033[1;36m╣
╠[\033[1;32m88\033[1;36m] \033[1;37mAbout Me  \033[1;36m                         ║
╠\033[1;34m════════════════════════════════════════\033[1;36m╣
╠[\033[1;32m99\033[1;36m] \033[1;33mCheck Lastest Version   \033[1;36m           ║
╠\033[1;34m════════════════════════════════════════\033[1;36m║
╠[\033[1;33m00\033[1;36m] \033[1;31mExit Tool \033[1;36m                         ║
╠════════════════════════════════════════╝
║""")
####################

#####################
#########selcet a tool def
def termux_tools():		
	sel = int(input("╚═══>$\ \033[1;33m"))
	if sel ==1:
		system('clear')
		logo()
		loadbar()
		system('clear')
		tool_name()
		system('pkg update')
		print('\n\033[1;37mUpdated successfully √')
		print(' ')
		system('pkg upgrade')
		print('\n\033[1;31mUpgraded Successfully √')
		print(" ")
		sleep(2)
		con_termux()
	####################
	
	elif sel ==2:
		system('clear')
		logo()
		loadbar()
		system('clear')
		tool_name()
		print("""\033[1;31m
╔════════════════════════╦════════════════════════╗
╠[\033[1;36m1\033[1;31m] \033[1;33mInstall Zip & Unzip \033[1;31m╠[\033[1;36m2\033[1;31m] \033[1;33mlazymux             \033[1;31m║
╠════════════════════════╬════════════════════════╣
╠[\033[1;36m3\033[1;31m] \033[1;33mTool-x              \033[1;31m╠[\033[1;36m4\033[1;31m] \033[1;33mSpammer-Grab\033[1;31m        ║
╠════════════════════════╬════════════════════════╣
╠[\033[1;36m5\033[1;31m]\033[1;33m Install Crunch \033[1;31m     ╠[\033[1;36m6\033[1;31m]\033[1;33m IpGeolocation       \033[1;31m║
╠════════════════════════╬════════════════════════╣
╠[\033[1;36m7\033[1;31m] \033[1;33mHammer              \033[1;31m╠[\033[1;36m8\033[1;31m] \033[1;33mWifite              \033[1;31m║
╠════════════════════════╬════════════════════════╣
╠[\033[1;36m9\033[1;31m] \033[1;33mAutoPixie           \033[1;31m╠[\033[1;36m10\033[1;31m]\033[1;33m Cewl            \033[1;31m   ║
╠════════════════════════╬════════════════════════╣
╠[\033[1;36m11\033[1;31m] \033[1;33mJohnny             \033[1;31m╠[\033[1;36m12\033[1;31m] \033[1;33mHunner             \033[1;31m║
╠════════════════════════╬════════════════════════╣
╠[\033[1;36m13\033[1;31m] \033[1;33mNano \033[1;32m(Editor)      \033[1;31m╠[\033[1;36m14\033[1;31m] \033[1;33mAirCrack-ng     \033[1;31m   ║
╠════════════════════════╬════════════════════════╣
╠[\033[1;36m15\033[1;31m] \033[1;33mWPScan             \033[1;31m╠[\033[1;36m16\033[1;31m] \033[1;33mHydra              \033[1;31m║
╠════════════════════════╬════════════════════════╣
╠[\033[1;36m17\033[1;31m] \033[1;33mSqlmap             \033[1;31m╠[\033[1;36m18\033[1;31m] \033[1;33mCurl               \033[1;31m║
╠════════════════════════╬════════════════════════╣
╠[\033[1;36m19\033[1;31m] \033[1;33mFsociety           \033[1;31m╠[\033[1;36m20] \033[1;33mXerxes             \033[1;31m║
╠════════════════════════╬════════════════════════╣
╠[\033[1;36m21\033[1;31m] \033[1;33mWirless-Info       \033[1;31m╠[\033[1;36m22\033[1;31m] \033[1;33mHt-Wps-Breaker     \033[1;31m║
╠════════════════════════╬════════════════════════╣
╠[\033[1;36m23\033[1;31m] \033[1;33mTrack My Location  \033[1;31m╠[\033[1;36m24\033[1;31m] \033[1;33mFluxion           \033[1;31m ║
╠════════════════════════╬════════════════════════╣
╠[\033[1;36m25\033[1;31m] \033[1;33mTermux Style \033[1;31m      ╠[\033[1;36m26\033[1;31m] \033[1;33mBeef               \033[1;31m║
╠════════════════════════╬════════════════════════╣
╠[\033[1;36m27\033[1;31m] \033[1;33mA-Rat              \033[1;31m╠[\033[1;36m28\033[1;31m] \033[1;33mDark Sploit        \033[1;31m║
╠════════════════════════╬════════════════════════╣
╠[\033[1;36m29\033[1;31m] \033[1;33mReaver Wps         \033[1;31m╠[\033[1;36m30\033[1;31m] \033[1;33m3vil Twin Attacker \033[1;31m║
╠════════════════════════╬════════════════════════╣
╠[\033[1;36m31\033[1;31m] \033[1;33mNgrok              \033[1;31m╠[\033[1;36m32\033[1;31m] \033[1;33mTermux Api         \033[1;31m║
╠════════════════════════╬════════════════════════╣
╠[\033[1;36m33\033[1;31m] \033[1;33mWifi Scan          \033[1;31m╠[\033[1;36m34\033[1;31m] \033[1;33mEasy Hack          \033[1;31m║
╚══════════════╦═════════╩═════════╦══════════════╝
               ║\033[1;100m  \033[1;31m[\033[1;33m99\033[1;31m] \033[1;37mMain Menu   \033[1;40m\033[1;31m║
               ╚═════════╦═════════╝
               ╔═════════╩═════════╗
               ║\033[1;101m    \033[1;33m[\033[1;37m00\033[1;33m] \033[1;37mExit      \033[1;40m\033[1;31m║
               ╚═════════╦═════════╝
╔════════════════════════╝""")
		tools =int(input('╚══[*] Enter Tool Number To install =>$\ \033[1;36m'))
		
		if tools ==1:
			system('pkg update')
			system('pkg upgrade')
			system('pkg install zip')
			system('pkg install unzip')
			print("")
			loadbar()
			print('\n [*]\033[1;33mZip & \033[1;37mUnzip Tool \033[1;32mInstalled Successfully √')
			sleep(1)
			con_termux()
			
		elif tools ==2:
			system('pkg update')
			system('pkg upgrade')
			system('pkg install git')
			system('git clone https://github.com/Gameye98/Lazymux.git')
			system('mv Lazymux ../')
			loadbar()
			print('\n\033[1;31m[*] \033[1;33mLazyMux installed successfully √')
			sleep(1)
			con_termux()
	
		elif tools ==3:
			system('pkg update')
			system('pkg upgrade')
			system('pkg install git')
			system('git clone https://github.com/Rajkumrdusad/Tool-X.git')
			system('mv Tool-X ../')
			loadbar()
			print('\n\033[1;31m[*] \033[1;33m Tool-X installed successfully √')
			sleep(1)
			con_termux()
		
		elif tools ==4:
			system('pkg update')
			system('pkg upgrade')
			system('pkg install git')
			system('git clone git clone https://github.com/WattanaGaming/Spammer-Grab-1.git')
			system('mv Spammer-Grab-1 ../')
			loadbar()
			print('\n\033[1;31m[*] \033[1;33mSpammer-Grab installed successfully √')
			sleep(1)
			con_termux()
		
		elif tools ==5:
			system('pkg update')
			system('pkg upgrade')
			system('pkg install crunch')
			loadbar()
			print('\n\033[1;31m[*] \033[1;33mCrunch installed successfully √ ')
			sleep(1)
			con_termux()
		
		elif tools ==6:
			system('pkg update')
			system('pkg upgrade')
			system('pkg install git')
			system('git clone https://github.com/maldevel/IPGeoLocation.git')
			system('mv IPGeoLocation ../')
			loadbar()
			print('\n\033[1;31m[*]\033[1;33m IPGeoLocation installed successfully √')
			sleep(1)
			con_termux()
		
		elif tools ==7:
			system('pkg update')
			system('pkg upgrade')
			system('pkg install git')
			system('git clone https://github.com/cyweb/hammer.git')
			system('mv hammer ../')
			loadbar()
			print('\n\033[1;31m[*] \033[1;33mHammer installed successfully √')
			sleep(1)
			con_termux()
		
		elif tools ==8:
			system('pkg update')
			system('pkg upgrade')
			system('pkg install git')
			system('git clone https://github.com/derv82/wifite.git')
			system('mv wifite ../')
			loadbar()
			print('\n\033[1;31m[*]\033[1;33m Wifite installed successfully √')
			sleep(1)
			con_termux()
		
		elif tools ==9:
			system('pkg update')
			system('pkg upgrade')
			system('pkg install git')
			system('git clone https://github.com/nxxxu/AutoPixieWps.git')
			system('mv AutoPixieWps ../')
			loadbar()
			print('\n\033[1;31m[*]\033[1;33m AutoPixie installed successfully √')
			sleep(1)
			con_termux()
		
		elif tools==10:
			system('pkg update')
			system('pkg upgrade')
			system('pkg install git')
			system('git clone https://github.com/digininja/CeWL.git')
			system('mv CeWL ../')
			loadbar()
			print('\n\033[1;31m[*] \033[1;33mCewl installed successfully √')
			sleep(1)
			con_termux()
		
		elif tools==11:
			system('pkg update')
			system("pkg upgrade")
			system('pkg install git')
			system('git clone https://github.com/shinnok/johnny.git')
			system('mv johnny ../')
			loadbar()
			print('\n\033[1;31m[*] \033[1;33mJohnny installed successfully √')
			sleep(1)
			con_termux()
		
		elif tools==12:
			system('pkg update')
			system('pkg upgrade')
			system('pkg install git')
			system('git clone https://github.com/b3-v3r/Hunner.git')
			system('mv Hunner ../')
			loadbar()
			print('\n\033[1;31m[*] \033[1;33mHunner installed successfully √')
			sleep(2)
			con_termux()
			
		elif tools==13:
			system('pkg install nano')
			loadbar()
			print('\n\033[1;31m[*] \033[1;33mNano installed successfully √')
			sleep(1)
			con_termux()
			
		elif tools==14:
			system('pkg update')
			system('pkg upgarde')
			system('pkg install git')
			system('git clone https://github.com/aircrack-ng/aircrack-ng.git')
			system('mv aircrack-ng ../')
			loadbar()
			print('\n\033[1;31m[*] \033[1;33mAircrack-ng installed successfully √')
			sleep(1)
			con_termux()
			
		elif tools==15:
			system('pkg update')
			system('pkg upgarde')
			system('pkg install git')
			system('git clone https://github.com/wpscanteam/wpscan.git')
			system('mv wpscan ../')
			loadbar()
			print('\n\033[1;31m[*] \033[1;33mWPScan installed successfully √')
			sleep(1)
			con_termux()
		
		elif tools==16:
			system('pkg update')
			system('pkg upgrade')
			system('pkg install hydra')
			loadbar()
			print('\n\033[1;31m[*]\033[1;33m Hydra installed successfully √')
			sleep(1)
			con_termux()
		
		elif tools==17:
			loadbar()
			system('clear')
			tool_name()
			system('pkg update')
			system('pkg upgrade')
			system('pkg install git')
			system('git clone git clone https://github.com/sqlmapproject/sqlmap.git')
			system('mv sqlmap ../')
			loadbar()
			print('\n\033[1;31m[*] \033[1;33mSqlmap installed successfully √')
			sleep(1)
			con_termux()
		
		elif tools==18:
			loadbar()
			system('clear')
			tool_name()
			system('pkg update')
			system('pkg upgarde')
			system('pkg install curl')
			loadbar()
			print('\n\033[1;31m[*] \033[1;33mCurl installed successfully √')
			sleep(1)
			con_termux()
		
		elif tools ==19:
			loadbar()
			system('clear')
			tool_name()
			system('pkg update')
			system('pkg upgrade')
			system('pkg install git')
			system('git clone git clone https://github.com/Manisso/fsociety.git')
			system('mv fsociety ../')
			loadbar()
			print('\n\033[1;31m[*] \033[1;33mFSociety installed successfully √')
			sleep(1)
			con_termux()
		
		elif tools==20:
			loadbar()
			system('clear')
			tool_name()
			system('pkg update')
			system('pkg upgrade')
			system('pkg install git')
			system('git clone git clone https://github.com/zanyarjamal/xerxes.git')
			system('mv xerxes ../')
			loadbar()
			print('\n\033[1;31m[*]\033[1;33m Xerxes (DDos Script) installed successfully √')
			sleep(1)
			con_termux()
		
		elif tools==21:
			loadbar()
			system('clear')
			tool_name()
			system('pkg update')
			system('pkg upgrade')
			system('git clone https://github.com/UbuntuForums/wireless-info.git')
			system('mv wireless-info ../')
			print('\n\033[1;31m[*] \033[1;33mWireless Info installed successfully √')
			sleep(1)
			con_termux()

		elif tools==22:
			loadbar()
			system('clear')
			tool_name()
			system('pkg update')
			system('pkg upgrade')
			system('git clone https://github.com/SilentGhostX/HT-WPS-Breaker.git')
			system('mv HT-WPS-Breaker ../')
			print('\n\033[1;31m[*] \033[1;33mHt Wps Breaker installed successfully √')
			sleep(1)
			con_termux()
		
		elif tools==23:
			loadbar()
			system('clear')
			tool_name()
			system('pkg update')
			system('pkg upgrade')
			system('git clone https://github.com/abdularis/Track-My-Location.git')
			system('mv Track-My-Location ../')
			print('\n\033[1;31m[*] \033[1;33mTrack My Location installed successfully √')
			sleep(1)
			con_termux()	
		
		elif tools==24:
			loadbar()
			system('clear')
			tool_name()
			system('pkg update')
			system('pkg upgrade')
			system('git clone https://github.com/wi-fi-analyzer/fluxion')
			system('mv fluxion ../')
			print('\n\033[1;31m[*]\033[1;33m Fluxion installed successfully √')
			sleep(1)
			con_termux()	

		elif tools==25:
			loadbar()
			system('clear')
			tool_name()
			system('pkg update')
			system('pkg upgrade')
			system('git clone https://github.com/adi1090x/termux-style.git')
			print('\n\033[1;31m[*]\033[1;33m Termux Style installed successfully √')
			sleep(1)
			con_termux()		

		elif tools==26:
			loadbar()
			system('clear')
			tool_name()
			system('pkg update')
			system('pkg upgrade')
			system('git clone https://github.com/beefproject/beef.git')
			system('mv beef ../')
			print('\n\033[1;31m[*]\033[1;33m Beef installed successfully √')
			sleep(1)
			con_termux()
					
		elif tools==27:
			loadbar()
			system('clear')
			tool_name()
			system('pkg update')
			system('pkg upgrade')
			system('git clone https://github.com/Xi4u7/A-Rat.git')
			system('mv A-Rat ../')
			print('\n\033[1;31m[*]\033[1;33m A-Rat installed successfully √')
			sleep(1)
			con_termux()

		elif tools==28:
			loadbar()
			system('clear')
			tool_name()
			system('pkg update')
			system('pkg upgrade')
			system('git clone https://github.com/anthrax3/DarkSploit.git')
			system('mv DarkSploit ../')
			print('\n\033[1;31m[*]\033[1;33m Dark Sploit installed successfully √')
			sleep(1)
			con_termux()
	
		elif tools==29:
			loadbar()
			system('clear')
			tool_name()
			system('pkg update')
			system('pkg upgrade')
			system('git clone https://github.com/t6x/reaver-wps-fork-t6x.git')
			system('mv reaver-wps-fork-t6x ../')
			print('\n\033[1;31m[*] \033[1;33mRever Wps installed successfully √')
			sleep(1)
			con_termux()

		elif tools==30:
			loadbar()
			system('clear')
			tool_name()
			system('pkg update')
			system('pkg upgrade')
			system('git clone https://github.com/wi-fi-analyzer/3vilTwinAttacker')
			system('mv 3vilTwinAttacker ../')
			print('\n\033[1;31m[*] \033[1;33m3vil Twin Attacker installed successfully √')
			sleep(1)
			con_termux()
		
		elif tools==31:
			loadbar()
			system('clear')
			tool_name()
			system('pkg update')
			system('pkg upgrade')
			system('git clone https://github.com/inconshreveable/ngrok.git')
			system('mv ngrok ../')
			print('\n\033[1;31m[*] \033[1;33mNgrok installed successfully √')
			sleep(1)
			con_termux()

		elif tools==32:
			loadbar()
			system('clear')
			tool_name()
			system('pkg update')
			system('pkg upgrade')
			system('apt install termux-api')
			print('\n\033[1;31m[*] \033[1;33mTermux Api installed successfully √')
			sleep(1)
			con_termux()

		elif tools==33:
			loadbar()
			system('clear')
			tool_name()
			system('pkg update')
			system('pkg upgrade')
			system('git clone https://github.com/bmegli/wifi-scan.git')
			system('mv wifi-scan ../')
			print('\n\033[1;31m[*] \033[1;33mWifi Scan installed successfully √')
			sleep(1)
			con_termux()

		elif tools==34:
			loadbar()
			system('clear')
			tool_name()
			system('pkg update')
			system('pkg upgrade')
			system('git clone https://github.com/sabri-zaki/EasY_HaCk')
			system('mv EasY_HaCK ../')
			print('\n\033[1;31m[*]\033[1;33m Easy Hack installed successfully √')
			sleep(2)
			con_termux()


		elif tools ==99:
			restart()
		
		elif tools ==00:
			print('\033[1;31m[*]\033[1;33m Exiting...')
			sleep(1)
			system('reset')
			exit()
			
		else:
			print('\033[1;33m[!] \033[1;31mError..Please try again ~')
			print('\n\n\033[1;36m[!]\033[1;32m R e s t a r t i n g...')
			sleep(2)
			restart()
	####################	
	elif sel ==3:
		system('clear')
		logo()
		loadbar()
		system('clear')
		tool_name()
		print("""\033[1;37m
╔═══════════════════════════╗
╠╦[\033[1;32m1\033[1;37m] \033[1;33mInstall Metasploit \033[1;37m   ║
╠╣                          ║
╠╬[\033[1;32m2\033[1;37m] \033[1;33mUpdate Metasploit \033[1;37m    ║
╠╣                          ║
╠╬[\033[1;32m3\033[1;37m] \033[1;33mRemove Metasploit     \033[1;37m║
╠╣                          ║
╠╬═[\033[1;36m88\033[1;37m] \033[1;32mMain Menu \033[1;37m          ║
╠╩══[\033[1;31m99\033[1;37m]\033[1;31m Exit \033[1;37m              ║
╠═══════════════════════════╝
║""")
		
		meta = int(input('╚══>$\ \033[1;36m'))
		if meta ==1:
			install = input('\033[1;31m[!]  \033[1;33mDo you have \033[1;37m500MB \033[1;33mfree in your storage??(\033[1;32my \033[1;33m/ \033[1;31mn\033[1;33m) : \033[1;36m')
			if install =='y' or install =='Y':
				system('pkg update')
				system('pkg upgrade')
				system('apt install unstable-repo -y')
				system('pkg install metasploit')
				print(' ')
				print('\033[1;31m[*]\033[1;36m Metasploit Installed Successfully √')
				sleep(1)
				con_termux()
			
			elif install =='n' or install =='N':
				con_termux()
			
			else:
				print('\033[1;31m[!] Error..Please try again ~')
				print('\n\n\033[1;36m[!] \033[1;32mR e s t a r t i n g...')
				sleep(1)
				restart()
		
		elif meta ==2:
			loadbar()
			system('pkg update')
			system('pkg upgarde')
			system('apt install unstable-repo-y')
			system('pkg install metasploit')
			system('msfupdate')
			print(' ')
			print('\033[1;32m[*] \033[1;37mMetasploit Updated Successfully √')
			sleep(1)
			con_termux()
			
		elif meta ==3:
			loadbar()
			system('pkg update')
			system('pkg upgrade')
			system('apt install unstable-repo-y')
			system('pkg remove metasploit')
			print(' ')
			print('\033[1;32m[*] \033[1;37mMetasploit Removed Successfully √')
			sleep(0.8)
			con_termux()
		
		elif meta ==88:
			restart()
			
		elif meta ==99:
			print('\033[1;33m[$]\033[1;31m Exiting....')
			sleep(1)
			system('reset')
			exit()
		
		else:
			print('\033[1;33m[!] \033[1;31mError .. Please try again ~')
			print('\n\n\033[1;32m[!] \033[1;33mR e s t a r t i n g...')
			sleep(1)
			restart()
			
	elif sel ==4:
		system('clear')
		logo()
		loadbar()
		system('clear')
		tool_name()
		print("""\033[1;37m
╔════════════════════════════════════╗
╠[\033[1;32m1\033[1;37m] \033[1;36mInstall Termux-Kali   \033[1;30m          ║
╠[\033[1;32m2\033[1;37m] \033[1;36mInstall Termux-Fedora \033[1;30m          ║
╠[\033[1;32m3\033[1;37m] \033[1;36mInstall Termux-ubuntu \033[1;30m          ║
║                                    ║
╠[\033[1;37m99\033[1;37m] \033[1;33mMain Menu            \033[1;30m          ║
╠═[\033[1;31m00\033[1;37m] \033[1;31mExit                \033[1;30m          ║
╠════════════════════════════════════╝""")
		linux = int(input('╚═══>\033[1;33m$\ \033[1;36m'))
		
		if linux ==1:
			kali =input('\033[1;31m[!]  \033[1;33mDo you have \033[1;37m500MB \033[1;33mfree in your storage??(\033[1;32my \033[1;33m/ \033[1;31mn\033[1;33m) : \033[1;36m')
			
			if kali =='y' or kali =='Y':
				loadbar()
				system('pkg update')
				system('pkg upgrade')
				system('pkg install wget proot -y && wget')
				system('pkg install git')
				system('git clone https://github.com/MasterDevX/Termux-Kali.git')
				system('mv Termux-Kali ../')
				print(' ')
				print('\033[1;31m[*] \033[1;33mTermux-Kali Installed Successfully √')
				sleep(2)
				con_termux()
			
			elif kali=='n' or kali =='N':
				con_termux()
			
			else:
				print('\033[1;31m[\033[1;33m!\033[1;31m] Error..Please try again ~')
				print('\n\n\033[1;37m[!] \033[1;36mR e s t a r t i n g')
				sleep(2)
				restart()
		
		elif linux ==2:
			fedora =input('\033[1;31m[!]  \033[1;33mDo you have \033[1;37m500MB \033[1;33mfree in your storage??(\033[1;32my \033[1;33m/ \033[1;31mn\033[1;33m) : \033[1;36m')
			
			if fedora =='y' or fedora =='Y':
				loadbar()
				system('pkg update')
				system('pkg upgrade')
				system("pkg install git")
				system('git clone https://github.com/nmilosev/termux-fedora.git')
				system('mv termux-fedora ../')
				print(' ')
				print('\033[1;33m[*] \033[1;36mFedora-termux installed successfully √')
				sleep(2)
				con_termux()
			
			elif fedora =='n' or fedora =='N':
				con_termux()
			
			else:
				print('\033[1;31m[\033[1;33m!\033[1;31m] Error..Please try again ~')
				print('\n\n\033[1;37m[!] \033[1;32mR e s t a r t I n g...')
				sleep(2)
				restart()
				
		elif linux ==3:
			ubuntu =input('\033[1;31m[!]  \033[1;33mDo you have \033[1;37m500MB \033[1;33mfree in your storage??(\033[1;32my \033[1;33m/ \033[1;31mn\033[1;33m) : \033[1;36m')
			
			if ubuntu =='y' or ubuntu =='Y':
				loadbar()
				system('pkg update')
				system('pkg upgrade')
				system('pkg install git')
				system('git clone https://github.com/Neo-Oli/termux-ubuntu.git')
				system('mv termux-ubuntu ../')
				print('\n\033[1;32m[*] \033[1;37mTermux-ubuntu installed successfully √')
				sleep(2)
				con_termux()
			
			elif ubuntu =='n' or ubuntu =='N':
				con_termux()
			
			else:
				print('\033[1;31m[\033[1;33m!\033[1;31m] Error..Please try again ~')
				print('\n\n\033[1;31m[!] \033[1;37mR e s t a r t I n g...')
				sleep(2)
				restart()
				
		elif linux ==99:
			restart()
		
		elif linux ==00:
			print('\033[1;31m[!] \033[1;33mExiting....')
			sleep(2)
			system('reset')
			exit()
			
		else:
			print('\033[1;31m[!] Error .. Please try again ~')
			print('\n\n\033[1;33m[!] \033[1;32mR e s t a r t I n g...')
			sleep(3)
			restart()
	
	elif sel ==5:
		system('clear')
		logo()
		loadbar()
		system('clear')
		jhash()
		print("""\033[1;37m
╔═══════════════════╗
╠\033[1;32m[1] Encode Text    \033[1;37m║
╠\033[1;32m[2] Decode Text    \033[1;37m║
║                   ║
╠[\033[1;36m88]\033[1;37mMain Menu      ║
╠═[\033[1;31m99\033[1;37m] \033[1;31mExit         \033[1;37m║
╚═════════╦═════════╝
╔═════════╝""")
			
		hash = int(input('╚[]Enter Num \033[1;33m$\ \033[1;36m'))
		if hash ==1:
			print(" ")
			text =input('\033[1;31m╔Enter text to encode:> \033[1;33m')
			base =b64encode(text.encode('ascii'))
			sleep(2)
			print("\033[1;31m║")
			print('╠═[>]Original text: \033[1;32m'+str(text))
			print("\033[1;31m║")
			print('╚══[>]Encoded text: \033[1;34m'+str(base))
			print("\n   \033[1;33m[!] Copy Text Between ' ' Only ..ツ")
			sleep(1)
			con_termux()
			
		elif hash==2:
			print(" ")
			textt =input('\033[1;31m╔Enter text to decode:> \033[1;33m')
			basee =b64decode(textt)
			sleep(2)
			print("\033[1;31m║")
			print('╠═[>]Encoded text: \033[1;32m'+str(textt))
			print("\033[1;31m║")
			print('╚══[>]Decoded text: \033[1;37m'+str(basee))
			print("\n    \033[1;33m[!] Copy Text Between ' ' Only ..ツ")
			sleep(1)
			con_termux()
				
		elif hash ==88:
			restart()
				
		elif hash ==99:
			print(" ")
			print('\033[1;31m[!] \033[1;33mExiting...')
			sleep(1)
			system('reset')
			exit()
			
		else:
			print('\033[1;31m[\033[1;33m!\033[1;31m] \033[1;31mError..Please try again ~')
			print('\n\n\033[1;36m[!] \033[1;30mR e s t a r t I n g...')
			sleep(1)
			restart()
	
	elif sel ==6:
		system("clear")
		logo()
		system('clear')
		tool_name()
		print("""\033[1;34m
╔[\033[1;36m1\033[1;34m] \033[1;32mIpLogger \033[1;34m(\033[1;33mInject Any link\033[1;34m)
╚═══>[" \033[1;37mhttps://iplogger.org/ \033[1;34m"])

╔[\033[1;36m2\033[1;34m] \033[1;32mAscii World \033[1;34m(\033[1;33mArt Your Text\033[1;34m)
╚═══>[" \033[1;37mhttps://www.asciiworld.com/ \033[1;34m"]

╔[\033[1;36m3\033[1;34m] \033[1;32mVirus Total \033[1;34m(\033[1;33mScan Any links and files\033[1;34m)
╚═══>[" \033[1;37mhttps://www.virustotal.com/ \033[1;34m"]

╔[\033[1;36m4\033[1;34m] \033[1;32mMohmal \033[1;34m(\033[1;33mCreate Fake Email Account\033[1;34m) 
╚═══>[" \033[1;37mhttps://www.mohmal.com/ \033[1;34m"]

╔[\033[1;36m5\033[1;34m] \033[1;32mSmikta \033[1;34m(\033[1;33mFake Websites\033[1;34m)
╚═══>[" \033[1;37mhttps://www.smikta.net/ \033[1;34m"] 

╔[\033[1;36m6\033[1;34m] \033[1;32mJoker-Dz \033[1;34m(\033[1;33mFake Websites\033[1;34m)
╚═══>[" \033[1;37mhttps://jokerdz.com/ \033[1;34m"] 

╔[\033[1;36m7\033[1;34m] \033[1;32mShraidar \033[1;34m(\033[1;33mFake Websites\033[1;34m)
╚═══>[" \033[1;37mhttps://myshraidar.com/ \033[1;34m"]""")
		sleep(1)
		con_termux()
	
	elif sel ==7:
		system('clear')
		logo()
		loadbar()
		system('pkg install figlet')
		system('clear')
		tool_name()
		art =input('\033[1;32m╔Enter text to art═> \033[1;37m')
		print("\033[1;32m║")
		print("║")
		print("╚══════════════╗")
		print("               ▼\033[1;36m")
		system('figlet '+str(art))
		sleep(0.8)
		con_termux()
			
	elif sel ==88:
		system('clear')
		tool_name()
		print("""\033[1;37m
Hello, Friend ...

This ToOl By: \033[1;31mRed_Virus \033[1;37m© 

\033[1;32mI'm coding this tool to help you for use termux easly and learning good.

\033[1;33mThis tool coding via python language.

\033[1;36mTool finished in 3 February 2020.

\033[1;37mThanks to download my tool and waiting tool updates.ツ

\033[1;33mEnjoy  \033[1;36m◕‿-""")
		sleep(1)
		print("\n \n")
		con_termux()
	
	elif sel ==99:
		system('clear')
		tool_name()
		print('''\033[1;33m
Tool Version Number: '1.2''

To Check The Latest Version, Please Visit:-

       https://github.com/RedVirus-Dev/JokerTools

And Download Lateset Version From Website ◕‿-
''')
		sleep(0.8)
		con_termux()
	
	elif sel == 00:
		print('\033[1;31m[\033[1;33m!\033[1;31m] Exiting... ')
		sleep(0.8)
		system('clear')
		system('reset')
		exit()
	
	else :
		print ("\n\033[1;31m[\033[1;33m!\033[1;31m] Error Please Try Again \033[1;33m¡..")
		print ("\n\033[1;32m[!] R e s t a r t I n g...")
		sleep(0.8)
		restart()
################
loading()
system('clear')
termux_menu()
termux_tools()
''' )
exec (base64.b64decode(x))